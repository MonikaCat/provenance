syntax = "proto3";
package provenance.reward.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "cosmos/base/v1beta1/coin.proto";
import "provenance/epoch/v1/genesis.proto";

option go_package          = "github.com/provenance-io/provenance/x/reward/types";
option java_package        = "io.provenance.reward.v1";
option java_multiple_files = true;

// RewardProgram
message RewardProgram {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  uint64                   id                      = 1;
  string                   distribute_from_address = 2; // community pool for now
  cosmos.base.v1beta1.Coin coin                    = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin max_reward_by_address   = 4
      [(gogoproto.nullable) = false]; // maximum rewards amount per address
  uint64 epoch_seconds = 5; // EpochInfo defines the type of epoch attributed to this program.(e.g day,week,month)
  google.protobuf.Timestamp program_start_time = 6 [
    (gogoproto.stdtime)  = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "program_start_time,omitempty",
    (gogoproto.moretags) = "yaml:\"program_start_time,omitempty\""
  ];
  google.protobuf.Timestamp epoch_end_time = 7 [
    (gogoproto.stdtime)  = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "epoch_end_time,omitempty",
    (gogoproto.moretags) = "yaml:\"epoch_end_time,omitempty\""
  ];
  uint64              number_epochs        = 8; // number of epochs this program will last for
  uint64              current_epoch        = 9; // the current epoch reward program is on
  EligibilityCriteria eligibility_criteria = 10
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"eligibility_criteria\""];
  ;
  bool                      started       = 11; // has the rewards program started
  bool                      finished      = 12; // has the rewards program completed
  google.protobuf.Timestamp finished_time = 13 [
    (gogoproto.stdtime)  = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "epoch_end_time,omitempty",
    (gogoproto.moretags) = "yaml:\"finished_time,omitempty\""
  ];

  repeated QualifyingAction qualifying_actions = 14 // The actions that count towards the reward
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"qualifying_actions"];
}
// EpochRewardDistribution, this will updated at the end of every epoch
message EpochRewardDistribution {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  string                   epoch_id           = 1;
  uint64                   reward_program_id  = 2;
  cosmos.base.v1beta1.Coin total_rewards_pool = 3
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"total_rewards_pool\""];
  int64 total_shares = 4;
  bool  epoch_ended  = 5;
}

// A RewardClaim is the metadata of reward data per address
message RewardClaim {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  // address of user reward
  string address = 1 [(gogoproto.moretags) = "yaml:\"address\""];

  // state of a reward claim
  bool expired = 2;

  // array of shares calculated per epoch for each reward program
  repeated SharesPerEpochPerRewardsProgram shares_per_epoch_per_reward = 4
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"shares_per_epoch_per_reward\""];
  ;
}

message SharesPerEpochPerRewardsProgram {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_getters)  = true;
  option (gogoproto.goproto_stringer) = false;

  uint64 reward_program_id      = 1; // epoch id can be derived from reward program
  int64  total_shares           = 2; // total shares accumulated( it is running total), can be negative
  int64  ephemeral_action_count = 3; // total number of times action has been taken by account
  uint64 latest_recorded_epoch  = 4; // last epoch number that this reward program was triggerred for.
  // action type
  bool                     claimed              = 5; // whether rewards has been claimed
  bool                     expired              = 6; // rewards have been expired, this is defined in RewardProgram
  cosmos.base.v1beta1.Coin total_reward_claimed = 7  // total rewards claimed by that address, which is equal to
                                                     // min((total_shares/total_shares_in_epoch)* total_pool_funds)
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"total_rewards\""];
}

// RewardProgram
message Share {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  uint64 id = 1; // A unique id for the share
  uint64 reward_program_id = 2;  // The id of the reward program that this share belongs to
  string address = 3 [(gogoproto.moretags) = "yaml:\"address\""]; // Owner of the share
  bool   claimed = 4;                                             // Share has been claimed

  // Time when share expires
  google.protobuf.Timestamp expire_time = 5 [
    (gogoproto.stdtime)  = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "expire_time,omitempty",
    (gogoproto.moretags) = "yaml:\"expire_time,omitempty\""
  ];
  int64 amount = 6;
}

message QualifyingAction {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = true;
  oneof type {
    ActionDelegate            delegate            = 1;
    ActionTransferDelegations transferDelegations = 2;
  }
}

// ActionDelegate, accounts that have delegated in an epoch period.
// rule: ActionDelegate " when account delegates in epoch period,
// if above min and below max, increase shares earned for rewards pool by 1.
message ActionDelegate {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;
}
// accounts that have made transfers, from accounts that have active delegations
// rule: ActionTransferDelegations "When transfer has occurred and the account has an active delegation,
// give it a share of the rewards pool, assuming it has not gone over max value and is above a min value" {
message ActionTransferDelegations {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;
}

// EligibilityCriteria defines an Action which accrues rewards for a running RewardProgram
message EligibilityCriteria {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.goproto_getters)  = false;

  string              name   = 1;
  google.protobuf.Any action = 2 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"action\""];
}
