syntax = "proto3";
package provenance.reward.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "cosmos/base/v1beta1/coin.proto";
import "provenance/epoch/v1/genesis.proto";

option go_package          = "github.com/provenance-io/provenance/x/reward/types";
option java_package        = "io.provenance.reward.v1";
option java_multiple_files = true;

// RewardProgram
message RewardProgram {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  uint64                   id                      = 1;
  string                   distribute_from_address = 2; // community pool for now
  cosmos.base.v1beta1.Coin coin                    = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin max_reward_by_address   = 4
      [(gogoproto.nullable) = false]; // maximum rewards amount per address
  string epoch_type      = 5; // EpochInfo defines the type of epoch attributed to this program.(e.g day,week,month)
  string start_time   = 6; // start_epoch defines the epoch number at which the rewards program should begin at
  uint64 number_epochs = 7; // number of epochs this program will last for
  EligibilityCriteria eligibility_criteria = 8
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"eligibility_criteria\""];
  ;
  bool   expired = 9;  // is the rewards program expired ( for efficient lookup)
  uint64 minimum = 10; // minimum number of actions before shares are distributed
  uint64 maximum = 11; // maximum number of actions before shares are no longer distributed
}
// EpochRewardDistribution, this will updated at the end of every epoch
message EpochRewardDistribution {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  string                   epoch_id           = 1;
  uint64                   reward_program_id  = 2;
  cosmos.base.v1beta1.Coin total_rewards_pool = 3
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"total_rewards_pool\""];
  int64 total_shares = 4;
  bool  epoch_ended  = 5;
}

// A RewardClaim is the metadata of reward data per address
message RewardClaim {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  // address of user reward
  string address = 1 [(gogoproto.moretags) = "yaml:\"address\""];

  // array of shares calculated per epoch for each reward program
  repeated SharesPerEpochPerRewardsProgram shares_per_epoch_per_reward = 4
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"shares_per_epoch_per_reward\""];
  ;
}

message SharesPerEpochPerRewardsProgram {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_getters)  = true;
  option (gogoproto.goproto_stringer) = false;

  uint64                   reward_program_id = 1; // epoch id can be derived from reward program
  int64                    total_shares      = 2; // total shares accumulated( it is running total), can be negative
  int64                    ephemeral_action_count = 3; // total number of times action has been taken by account
  uint64                   latest_recorded_epoch  = 4; // last epoch number that this reward program was triggerred for.
  bool                     claimed                = 5; // whether rewards has been claimed
  bool                     expired                = 6; // rewards have been expired, this is defined in RewardProgram
  cosmos.base.v1beta1.Coin total_reward_claimed   = 7  // total rewards claimed by that address, which is equal to
                                                       // min((total_shares/total_shares_in_epoch)* total_pool_funds)
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"total_rewards\""];
}

// ActionDelegate, accounts that have delegated in an epoch period.
// rule: ActionDelegate " when account delegates in epoch period,
// if above min and below max, increase shares earned for rewards pool by 1.
message ActionDelegate {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;
}
// accounts that have made transfers, from accounts that have active delegations
// rule: ActionTransferDelegations "When transfer has occurred and the account has an active delegation,
// give it a share of the rewards pool, assuming it has not gone over max value and is above a min value" {
message ActionTransferDelegations {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;
}

// EligibilityCriteria defines an Action which accrues rewards for a running RewardProgram
message EligibilityCriteria {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.goproto_getters)  = false;

  string              name   = 1;
  google.protobuf.Any action = 2 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"action\""];
}
