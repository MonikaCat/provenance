syntax = "proto3";
package provenance.reward.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "provenance/epoch/v1/genesis.proto";

option go_package          = "github.com/provenance-io/provenance/x/reward/types";
option java_package        = "io.provenance.reward.v1";
option java_multiple_files = true;

// RewardProgram
message RewardProgram {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  uint64                        id                      = 1;
  string                        distribute_from_address = 2; // community pool for now
  cosmos.base.v1beta1.Coin      coin                    = 3;
  provenance.epoch.v1.EpochInfo epoch =
      4;                    // EpochInfo defines the type of epoch attributed to this program.(e.g day,week,month)
  uint64 start_epoch   = 5; // start_epoch defines the epoch number at which the rewards program should begin at
  uint64 number_epochs = 6; // number of epochs this program will last for
  EligibilityCriteria eligibility_criteria = 7;
}

// EpochRewardDistribution, this will updated at the end of every epoch
message EpochRewardDistribution {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  string                   epoch_id           = 1;
  uint64                   reward_program_id  = 2;
  cosmos.base.v1beta1.Coin total_rewards_pool = 3;
  uint64                   total_shares       = 4;
}

// A RewardClaim is the metadata of reward data per address
message RewardClaim {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  // address of user reward
  string address = 1 [(gogoproto.moretags) = "yaml:\"address\""];

  // array of shares calculated per epoch for each reward program
  repeated SharesPerEpochPerRewardsProgram shares_per_epoch_per_reward = 4;
}

message SharesPerEpochPerRewardsProgram {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_getters)  = true;
  option (gogoproto.goproto_stringer) = false;

  uint64                   reward_program_id = 1;
  int64                    shares            = 2;
  string                   epoch_id          = 3;
  uint64                   epoch_end_height  = 4;
  bool                     claimed           = 5;
  uint64                   expiration_height = 6;
  bool                     expired           = 7;
  int64                    total_shares      = 8; // only populated at epoch end
  cosmos.base.v1beta1.Coin total_rewards     = 9
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"total_rewards\""];
}
message ActionDelegate {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  int64 minimum = 1;
  int64 maximum = 2;
}
// accounts for transfer from accounts that have active delegations
message ActionTransferDelegations {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  int64 minimum = 1;
  int64 maximum = 2;
}

// EligibilityCriteria defines an Action which accrues rewards for a running RewardProgram
message EligibilityCriteria {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  string name = 1;
  oneof  action {
    ActionDelegate            action_delegate          = 2;
    ActionTransferDelegations action_transfer_delegate = 3;
  }
}
