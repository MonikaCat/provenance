// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/reward/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RewardProgramByIDRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RewardProgramByIDRequest) Reset()         { *m = RewardProgramByIDRequest{} }
func (m *RewardProgramByIDRequest) String() string { return proto.CompactTextString(m) }
func (*RewardProgramByIDRequest) ProtoMessage()    {}
func (*RewardProgramByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{0}
}
func (m *RewardProgramByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardProgramByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardProgramByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardProgramByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardProgramByIDRequest.Merge(m, src)
}
func (m *RewardProgramByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RewardProgramByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardProgramByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RewardProgramByIDRequest proto.InternalMessageInfo

func (m *RewardProgramByIDRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RewardProgramByIDResponse struct {
	RewardProgram *RewardProgram `protobuf:"bytes,1,opt,name=reward_program,json=rewardProgram,proto3" json:"reward_program,omitempty"`
}

func (m *RewardProgramByIDResponse) Reset()         { *m = RewardProgramByIDResponse{} }
func (m *RewardProgramByIDResponse) String() string { return proto.CompactTextString(m) }
func (*RewardProgramByIDResponse) ProtoMessage()    {}
func (*RewardProgramByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{1}
}
func (m *RewardProgramByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardProgramByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardProgramByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardProgramByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardProgramByIDResponse.Merge(m, src)
}
func (m *RewardProgramByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RewardProgramByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardProgramByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RewardProgramByIDResponse proto.InternalMessageInfo

func (m *RewardProgramByIDResponse) GetRewardProgram() *RewardProgram {
	if m != nil {
		return m.RewardProgram
	}
	return nil
}

type RewardProgramsRequest struct {
}

func (m *RewardProgramsRequest) Reset()         { *m = RewardProgramsRequest{} }
func (m *RewardProgramsRequest) String() string { return proto.CompactTextString(m) }
func (*RewardProgramsRequest) ProtoMessage()    {}
func (*RewardProgramsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{2}
}
func (m *RewardProgramsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardProgramsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardProgramsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardProgramsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardProgramsRequest.Merge(m, src)
}
func (m *RewardProgramsRequest) XXX_Size() int {
	return m.Size()
}
func (m *RewardProgramsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardProgramsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RewardProgramsRequest proto.InternalMessageInfo

type RewardProgramsResponse struct {
	RewardPrograms []RewardProgram `protobuf:"bytes,1,rep,name=reward_programs,json=rewardPrograms,proto3" json:"reward_programs"`
}

func (m *RewardProgramsResponse) Reset()         { *m = RewardProgramsResponse{} }
func (m *RewardProgramsResponse) String() string { return proto.CompactTextString(m) }
func (*RewardProgramsResponse) ProtoMessage()    {}
func (*RewardProgramsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{3}
}
func (m *RewardProgramsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardProgramsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardProgramsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardProgramsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardProgramsResponse.Merge(m, src)
}
func (m *RewardProgramsResponse) XXX_Size() int {
	return m.Size()
}
func (m *RewardProgramsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardProgramsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RewardProgramsResponse proto.InternalMessageInfo

func (m *RewardProgramsResponse) GetRewardPrograms() []RewardProgram {
	if m != nil {
		return m.RewardPrograms
	}
	return nil
}

type ActiveRewardProgramsRequest struct {
}

func (m *ActiveRewardProgramsRequest) Reset()         { *m = ActiveRewardProgramsRequest{} }
func (m *ActiveRewardProgramsRequest) String() string { return proto.CompactTextString(m) }
func (*ActiveRewardProgramsRequest) ProtoMessage()    {}
func (*ActiveRewardProgramsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{4}
}
func (m *ActiveRewardProgramsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveRewardProgramsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveRewardProgramsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveRewardProgramsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveRewardProgramsRequest.Merge(m, src)
}
func (m *ActiveRewardProgramsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ActiveRewardProgramsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveRewardProgramsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveRewardProgramsRequest proto.InternalMessageInfo

type ActiveRewardProgramsResponse struct {
	RewardPrograms []RewardProgram `protobuf:"bytes,1,rep,name=reward_programs,json=rewardPrograms,proto3" json:"reward_programs"`
}

func (m *ActiveRewardProgramsResponse) Reset()         { *m = ActiveRewardProgramsResponse{} }
func (m *ActiveRewardProgramsResponse) String() string { return proto.CompactTextString(m) }
func (*ActiveRewardProgramsResponse) ProtoMessage()    {}
func (*ActiveRewardProgramsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{5}
}
func (m *ActiveRewardProgramsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveRewardProgramsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveRewardProgramsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveRewardProgramsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveRewardProgramsResponse.Merge(m, src)
}
func (m *ActiveRewardProgramsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ActiveRewardProgramsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveRewardProgramsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveRewardProgramsResponse proto.InternalMessageInfo

func (m *ActiveRewardProgramsResponse) GetRewardPrograms() []RewardProgram {
	if m != nil {
		return m.RewardPrograms
	}
	return nil
}

// QueryModuleAccountBalanceRequest is the request type for the Query/Params RPC method.
type QueryModuleAccountBalanceRequest struct {
}

func (m *QueryModuleAccountBalanceRequest) Reset()         { *m = QueryModuleAccountBalanceRequest{} }
func (m *QueryModuleAccountBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModuleAccountBalanceRequest) ProtoMessage()    {}
func (*QueryModuleAccountBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{6}
}
func (m *QueryModuleAccountBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleAccountBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleAccountBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleAccountBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleAccountBalanceRequest.Merge(m, src)
}
func (m *QueryModuleAccountBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleAccountBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleAccountBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleAccountBalanceRequest proto.InternalMessageInfo

// QueryModuleAccountBalanceResponse is the response type for the Query/Params RPC method.
type QueryModuleAccountBalanceResponse struct {
	// params defines the parameters of the module.
	ModuleAccountBalance github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=moduleAccountBalance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"moduleAccountBalance" yaml:"coins"`
}

func (m *QueryModuleAccountBalanceResponse) Reset()         { *m = QueryModuleAccountBalanceResponse{} }
func (m *QueryModuleAccountBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModuleAccountBalanceResponse) ProtoMessage()    {}
func (*QueryModuleAccountBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{7}
}
func (m *QueryModuleAccountBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleAccountBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleAccountBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleAccountBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleAccountBalanceResponse.Merge(m, src)
}
func (m *QueryModuleAccountBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleAccountBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleAccountBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleAccountBalanceResponse proto.InternalMessageInfo

func (m *QueryModuleAccountBalanceResponse) GetModuleAccountBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ModuleAccountBalance
	}
	return nil
}

type RewardClaimsRequest struct {
}

func (m *RewardClaimsRequest) Reset()         { *m = RewardClaimsRequest{} }
func (m *RewardClaimsRequest) String() string { return proto.CompactTextString(m) }
func (*RewardClaimsRequest) ProtoMessage()    {}
func (*RewardClaimsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{8}
}
func (m *RewardClaimsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardClaimsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardClaimsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardClaimsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardClaimsRequest.Merge(m, src)
}
func (m *RewardClaimsRequest) XXX_Size() int {
	return m.Size()
}
func (m *RewardClaimsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardClaimsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RewardClaimsRequest proto.InternalMessageInfo

type RewardClaimsResponse struct {
	RewardClaims []RewardClaim `protobuf:"bytes,1,rep,name=reward_claims,json=rewardClaims,proto3" json:"reward_claims"`
}

func (m *RewardClaimsResponse) Reset()         { *m = RewardClaimsResponse{} }
func (m *RewardClaimsResponse) String() string { return proto.CompactTextString(m) }
func (*RewardClaimsResponse) ProtoMessage()    {}
func (*RewardClaimsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{9}
}
func (m *RewardClaimsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardClaimsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardClaimsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardClaimsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardClaimsResponse.Merge(m, src)
}
func (m *RewardClaimsResponse) XXX_Size() int {
	return m.Size()
}
func (m *RewardClaimsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardClaimsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RewardClaimsResponse proto.InternalMessageInfo

func (m *RewardClaimsResponse) GetRewardClaims() []RewardClaim {
	if m != nil {
		return m.RewardClaims
	}
	return nil
}

type RewardClaimByIDRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RewardClaimByIDRequest) Reset()         { *m = RewardClaimByIDRequest{} }
func (m *RewardClaimByIDRequest) String() string { return proto.CompactTextString(m) }
func (*RewardClaimByIDRequest) ProtoMessage()    {}
func (*RewardClaimByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{10}
}
func (m *RewardClaimByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardClaimByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardClaimByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardClaimByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardClaimByIDRequest.Merge(m, src)
}
func (m *RewardClaimByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RewardClaimByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardClaimByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RewardClaimByIDRequest proto.InternalMessageInfo

func (m *RewardClaimByIDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RewardClaimByIDResponse struct {
	RewardClaim *RewardClaim `protobuf:"bytes,1,opt,name=reward_claim,json=rewardClaim,proto3" json:"reward_claim,omitempty"`
}

func (m *RewardClaimByIDResponse) Reset()         { *m = RewardClaimByIDResponse{} }
func (m *RewardClaimByIDResponse) String() string { return proto.CompactTextString(m) }
func (*RewardClaimByIDResponse) ProtoMessage()    {}
func (*RewardClaimByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{11}
}
func (m *RewardClaimByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardClaimByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardClaimByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardClaimByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardClaimByIDResponse.Merge(m, src)
}
func (m *RewardClaimByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RewardClaimByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardClaimByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RewardClaimByIDResponse proto.InternalMessageInfo

func (m *RewardClaimByIDResponse) GetRewardClaim() *RewardClaim {
	if m != nil {
		return m.RewardClaim
	}
	return nil
}

type EpochRewardDistributionRequest struct {
}

func (m *EpochRewardDistributionRequest) Reset()         { *m = EpochRewardDistributionRequest{} }
func (m *EpochRewardDistributionRequest) String() string { return proto.CompactTextString(m) }
func (*EpochRewardDistributionRequest) ProtoMessage()    {}
func (*EpochRewardDistributionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{12}
}
func (m *EpochRewardDistributionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochRewardDistributionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochRewardDistributionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochRewardDistributionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochRewardDistributionRequest.Merge(m, src)
}
func (m *EpochRewardDistributionRequest) XXX_Size() int {
	return m.Size()
}
func (m *EpochRewardDistributionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochRewardDistributionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EpochRewardDistributionRequest proto.InternalMessageInfo

type EpochRewardDistributionResponse struct {
	EpochRewardDistribution []EpochRewardDistribution `protobuf:"bytes,1,rep,name=epoch_reward_distribution,json=epochRewardDistribution,proto3" json:"epoch_reward_distribution"`
}

func (m *EpochRewardDistributionResponse) Reset()         { *m = EpochRewardDistributionResponse{} }
func (m *EpochRewardDistributionResponse) String() string { return proto.CompactTextString(m) }
func (*EpochRewardDistributionResponse) ProtoMessage()    {}
func (*EpochRewardDistributionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{13}
}
func (m *EpochRewardDistributionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochRewardDistributionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochRewardDistributionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochRewardDistributionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochRewardDistributionResponse.Merge(m, src)
}
func (m *EpochRewardDistributionResponse) XXX_Size() int {
	return m.Size()
}
func (m *EpochRewardDistributionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochRewardDistributionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EpochRewardDistributionResponse proto.InternalMessageInfo

func (m *EpochRewardDistributionResponse) GetEpochRewardDistribution() []EpochRewardDistribution {
	if m != nil {
		return m.EpochRewardDistribution
	}
	return nil
}

type EpochRewardDistributionByIDRequest struct {
	RewardId uint64 `protobuf:"varint,1,opt,name=rewardId,proto3" json:"rewardId,omitempty"`
	EpochId  string `protobuf:"bytes,2,opt,name=epochId,proto3" json:"epochId,omitempty"`
}

func (m *EpochRewardDistributionByIDRequest) Reset()         { *m = EpochRewardDistributionByIDRequest{} }
func (m *EpochRewardDistributionByIDRequest) String() string { return proto.CompactTextString(m) }
func (*EpochRewardDistributionByIDRequest) ProtoMessage()    {}
func (*EpochRewardDistributionByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{14}
}
func (m *EpochRewardDistributionByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochRewardDistributionByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochRewardDistributionByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochRewardDistributionByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochRewardDistributionByIDRequest.Merge(m, src)
}
func (m *EpochRewardDistributionByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *EpochRewardDistributionByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochRewardDistributionByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EpochRewardDistributionByIDRequest proto.InternalMessageInfo

func (m *EpochRewardDistributionByIDRequest) GetRewardId() uint64 {
	if m != nil {
		return m.RewardId
	}
	return 0
}

func (m *EpochRewardDistributionByIDRequest) GetEpochId() string {
	if m != nil {
		return m.EpochId
	}
	return ""
}

type EpochRewardDistributionByIDResponse struct {
	EpochRewardDistribution *EpochRewardDistribution `protobuf:"bytes,1,opt,name=epoch_reward_distribution,json=epochRewardDistribution,proto3" json:"epoch_reward_distribution,omitempty"`
}

func (m *EpochRewardDistributionByIDResponse) Reset()         { *m = EpochRewardDistributionByIDResponse{} }
func (m *EpochRewardDistributionByIDResponse) String() string { return proto.CompactTextString(m) }
func (*EpochRewardDistributionByIDResponse) ProtoMessage()    {}
func (*EpochRewardDistributionByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{15}
}
func (m *EpochRewardDistributionByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochRewardDistributionByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochRewardDistributionByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochRewardDistributionByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochRewardDistributionByIDResponse.Merge(m, src)
}
func (m *EpochRewardDistributionByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *EpochRewardDistributionByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochRewardDistributionByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EpochRewardDistributionByIDResponse proto.InternalMessageInfo

func (m *EpochRewardDistributionByIDResponse) GetEpochRewardDistribution() *EpochRewardDistribution {
	if m != nil {
		return m.EpochRewardDistribution
	}
	return nil
}

type EligibilityCriteriaRequest struct {
}

func (m *EligibilityCriteriaRequest) Reset()         { *m = EligibilityCriteriaRequest{} }
func (m *EligibilityCriteriaRequest) String() string { return proto.CompactTextString(m) }
func (*EligibilityCriteriaRequest) ProtoMessage()    {}
func (*EligibilityCriteriaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{16}
}
func (m *EligibilityCriteriaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EligibilityCriteriaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EligibilityCriteriaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EligibilityCriteriaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EligibilityCriteriaRequest.Merge(m, src)
}
func (m *EligibilityCriteriaRequest) XXX_Size() int {
	return m.Size()
}
func (m *EligibilityCriteriaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EligibilityCriteriaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EligibilityCriteriaRequest proto.InternalMessageInfo

type EligibilityCriteriaResponse struct {
	EligibilityCriteria []EligibilityCriteria `protobuf:"bytes,1,rep,name=eligibility_criteria,json=eligibilityCriteria,proto3" json:"eligibility_criteria"`
}

func (m *EligibilityCriteriaResponse) Reset()         { *m = EligibilityCriteriaResponse{} }
func (m *EligibilityCriteriaResponse) String() string { return proto.CompactTextString(m) }
func (*EligibilityCriteriaResponse) ProtoMessage()    {}
func (*EligibilityCriteriaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{17}
}
func (m *EligibilityCriteriaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EligibilityCriteriaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EligibilityCriteriaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EligibilityCriteriaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EligibilityCriteriaResponse.Merge(m, src)
}
func (m *EligibilityCriteriaResponse) XXX_Size() int {
	return m.Size()
}
func (m *EligibilityCriteriaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EligibilityCriteriaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EligibilityCriteriaResponse proto.InternalMessageInfo

func (m *EligibilityCriteriaResponse) GetEligibilityCriteria() []EligibilityCriteria {
	if m != nil {
		return m.EligibilityCriteria
	}
	return nil
}

type EligibilityCriteriaRequestByNameRequest struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *EligibilityCriteriaRequestByNameRequest) Reset() {
	*m = EligibilityCriteriaRequestByNameRequest{}
}
func (m *EligibilityCriteriaRequestByNameRequest) String() string { return proto.CompactTextString(m) }
func (*EligibilityCriteriaRequestByNameRequest) ProtoMessage()    {}
func (*EligibilityCriteriaRequestByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{18}
}
func (m *EligibilityCriteriaRequestByNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EligibilityCriteriaRequestByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EligibilityCriteriaRequestByNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EligibilityCriteriaRequestByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EligibilityCriteriaRequestByNameRequest.Merge(m, src)
}
func (m *EligibilityCriteriaRequestByNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *EligibilityCriteriaRequestByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EligibilityCriteriaRequestByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EligibilityCriteriaRequestByNameRequest proto.InternalMessageInfo

func (m *EligibilityCriteriaRequestByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EligibilityCriteriaRequestByNameResponse struct {
	EligibilityCriteria *EligibilityCriteria `protobuf:"bytes,1,opt,name=eligibility_criteria,json=eligibilityCriteria,proto3" json:"eligibility_criteria,omitempty"`
}

func (m *EligibilityCriteriaRequestByNameResponse) Reset() {
	*m = EligibilityCriteriaRequestByNameResponse{}
}
func (m *EligibilityCriteriaRequestByNameResponse) String() string { return proto.CompactTextString(m) }
func (*EligibilityCriteriaRequestByNameResponse) ProtoMessage()    {}
func (*EligibilityCriteriaRequestByNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{19}
}
func (m *EligibilityCriteriaRequestByNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EligibilityCriteriaRequestByNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EligibilityCriteriaRequestByNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EligibilityCriteriaRequestByNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EligibilityCriteriaRequestByNameResponse.Merge(m, src)
}
func (m *EligibilityCriteriaRequestByNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *EligibilityCriteriaRequestByNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EligibilityCriteriaRequestByNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EligibilityCriteriaRequestByNameResponse proto.InternalMessageInfo

func (m *EligibilityCriteriaRequestByNameResponse) GetEligibilityCriteria() *EligibilityCriteria {
	if m != nil {
		return m.EligibilityCriteria
	}
	return nil
}

func init() {
	proto.RegisterType((*RewardProgramByIDRequest)(nil), "provenance.reward.v1.RewardProgramByIDRequest")
	proto.RegisterType((*RewardProgramByIDResponse)(nil), "provenance.reward.v1.RewardProgramByIDResponse")
	proto.RegisterType((*RewardProgramsRequest)(nil), "provenance.reward.v1.RewardProgramsRequest")
	proto.RegisterType((*RewardProgramsResponse)(nil), "provenance.reward.v1.RewardProgramsResponse")
	proto.RegisterType((*ActiveRewardProgramsRequest)(nil), "provenance.reward.v1.ActiveRewardProgramsRequest")
	proto.RegisterType((*ActiveRewardProgramsResponse)(nil), "provenance.reward.v1.ActiveRewardProgramsResponse")
	proto.RegisterType((*QueryModuleAccountBalanceRequest)(nil), "provenance.reward.v1.QueryModuleAccountBalanceRequest")
	proto.RegisterType((*QueryModuleAccountBalanceResponse)(nil), "provenance.reward.v1.QueryModuleAccountBalanceResponse")
	proto.RegisterType((*RewardClaimsRequest)(nil), "provenance.reward.v1.RewardClaimsRequest")
	proto.RegisterType((*RewardClaimsResponse)(nil), "provenance.reward.v1.RewardClaimsResponse")
	proto.RegisterType((*RewardClaimByIDRequest)(nil), "provenance.reward.v1.RewardClaimByIDRequest")
	proto.RegisterType((*RewardClaimByIDResponse)(nil), "provenance.reward.v1.RewardClaimByIDResponse")
	proto.RegisterType((*EpochRewardDistributionRequest)(nil), "provenance.reward.v1.EpochRewardDistributionRequest")
	proto.RegisterType((*EpochRewardDistributionResponse)(nil), "provenance.reward.v1.EpochRewardDistributionResponse")
	proto.RegisterType((*EpochRewardDistributionByIDRequest)(nil), "provenance.reward.v1.EpochRewardDistributionByIDRequest")
	proto.RegisterType((*EpochRewardDistributionByIDResponse)(nil), "provenance.reward.v1.EpochRewardDistributionByIDResponse")
	proto.RegisterType((*EligibilityCriteriaRequest)(nil), "provenance.reward.v1.EligibilityCriteriaRequest")
	proto.RegisterType((*EligibilityCriteriaResponse)(nil), "provenance.reward.v1.EligibilityCriteriaResponse")
	proto.RegisterType((*EligibilityCriteriaRequestByNameRequest)(nil), "provenance.reward.v1.EligibilityCriteriaRequestByNameRequest")
	proto.RegisterType((*EligibilityCriteriaRequestByNameResponse)(nil), "provenance.reward.v1.EligibilityCriteriaRequestByNameResponse")
}

func init() { proto.RegisterFile("provenance/reward/v1/query.proto", fileDescriptor_89e47dd1c3e4febf) }

var fileDescriptor_89e47dd1c3e4febf = []byte{
	// 1082 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x84, 0xf0, 0xeb, 0x35, 0xa4, 0x62, 0xe2, 0x12, 0xc7, 0x0d, 0x4e, 0xb2, 0x45, 0x25,
	0x6d, 0xe3, 0xdd, 0xd8, 0x69, 0x4b, 0x5b, 0xa9, 0x88, 0x3a, 0xe9, 0x21, 0x88, 0x42, 0xb1, 0xc4,
	0xa5, 0x42, 0x5a, 0xed, 0x8f, 0xc1, 0x1d, 0x61, 0x7b, 0xdc, 0x9d, 0x75, 0xc0, 0x8a, 0x72, 0x80,
	0x13, 0x37, 0x2a, 0x7a, 0xe4, 0xce, 0x81, 0x03, 0x5c, 0xe0, 0xca, 0x81, 0x53, 0xc5, 0xa9, 0x12,
	0x12, 0xe2, 0x54, 0x50, 0xc2, 0x89, 0x23, 0x7f, 0x01, 0xf2, 0xec, 0xdb, 0x7a, 0x9d, 0xcc, 0xda,
	0xbb, 0x95, 0x7a, 0x8a, 0x37, 0xef, 0x7b, 0x6f, 0xbe, 0xef, 0xed, 0x9b, 0xf7, 0xd9, 0xb0, 0xd2,
	0x0d, 0xc4, 0x2e, 0xeb, 0x38, 0x1d, 0x8f, 0x59, 0x01, 0xfb, 0xcc, 0x09, 0x7c, 0x6b, 0xb7, 0x6a,
	0xdd, 0xeb, 0xb1, 0xa0, 0x6f, 0x76, 0x03, 0x11, 0x0a, 0x5a, 0x18, 0x22, 0xcc, 0x08, 0x61, 0xee,
	0x56, 0x4b, 0x85, 0xa6, 0x68, 0x0a, 0x05, 0xb0, 0x06, 0x9f, 0x22, 0x6c, 0x69, 0xa9, 0x29, 0x44,
	0xb3, 0xc5, 0x2c, 0xa7, 0xcb, 0x2d, 0xa7, 0xd3, 0x11, 0xa1, 0x13, 0x72, 0xd1, 0x91, 0x18, 0x2d,
	0x63, 0x54, 0x3d, 0xb9, 0xbd, 0x4f, 0x2c, 0xbf, 0x17, 0x28, 0x00, 0xc6, 0x97, 0x8f, 0xc6, 0x43,
	0xde, 0x66, 0x32, 0x74, 0xda, 0xdd, 0xb8, 0x80, 0x27, 0x64, 0x5b, 0x48, 0xcb, 0x75, 0x24, 0xb3,
	0x76, 0xab, 0x2e, 0x0b, 0x9d, 0xaa, 0xe5, 0x09, 0x1e, 0x17, 0x58, 0xd5, 0x8a, 0x41, 0xd2, 0x0a,
	0x62, 0x9c, 0x87, 0x62, 0x43, 0x3d, 0xdf, 0x0e, 0x44, 0x33, 0x70, 0xda, 0xf5, 0xfe, 0xce, 0x76,
	0x83, 0xdd, 0xeb, 0x31, 0x19, 0xd2, 0x39, 0x98, 0xe6, 0x7e, 0x91, 0xac, 0x90, 0xb5, 0x99, 0xc6,
	0x34, 0xf7, 0x8d, 0x26, 0x2c, 0x6a, 0xb0, 0xb2, 0x2b, 0x3a, 0x92, 0xd1, 0x77, 0x61, 0x2e, 0x2a,
	0x6c, 0x77, 0xa3, 0xa8, 0x4a, 0x3c, 0x51, 0x3b, 0x63, 0xea, 0xfa, 0x65, 0x8e, 0x14, 0x6a, 0xbc,
	0x12, 0x24, 0x1f, 0x8d, 0x05, 0x38, 0x35, 0x12, 0x97, 0xc8, 0xc8, 0x68, 0xc1, 0x6b, 0x47, 0x03,
	0x78, 0x7c, 0x03, 0x4e, 0x8e, 0x1e, 0x2f, 0x8b, 0x64, 0xe5, 0xb9, 0x8c, 0xe7, 0xd7, 0x67, 0x1e,
	0x3e, 0x5e, 0x9e, 0x6a, 0xcc, 0x8d, 0xb0, 0x90, 0xc6, 0xeb, 0x70, 0xfa, 0x86, 0x17, 0xf2, 0x5d,
	0xa6, 0x27, 0x13, 0xc0, 0x92, 0x3e, 0xfc, 0x0c, 0x29, 0x19, 0xb0, 0xf2, 0xe1, 0x60, 0x16, 0x6f,
	0x09, 0xbf, 0xd7, 0x62, 0x37, 0x3c, 0x4f, 0xf4, 0x3a, 0x61, 0xdd, 0x69, 0x0d, 0x4a, 0xc5, 0xbc,
	0x7e, 0x26, 0xb0, 0x3a, 0x06, 0x84, 0xec, 0xbe, 0x26, 0x50, 0x68, 0x6b, 0x00, 0xc8, 0x71, 0xd1,
	0x8c, 0x66, 0xcb, 0x1c, 0xcc, 0x96, 0x89, 0xb3, 0x65, 0x6e, 0x09, 0xde, 0xa9, 0xbf, 0x33, 0x60,
	0xf6, 0xdf, 0xe3, 0xe5, 0xd9, 0xbe, 0xd3, 0x6e, 0x5d, 0x33, 0x06, 0xf3, 0x26, 0x8d, 0xef, 0xff,
	0x5a, 0x5e, 0x6b, 0xf2, 0xf0, 0x6e, 0xcf, 0x35, 0x3d, 0xd1, 0xb6, 0x70, 0x30, 0xa3, 0x3f, 0x15,
	0xe9, 0x7f, 0x6a, 0x85, 0xfd, 0x2e, 0x93, 0xaa, 0x80, 0x6c, 0x68, 0x0f, 0x36, 0x4e, 0xc1, 0x7c,
	0xd4, 0x82, 0xad, 0x96, 0xc3, 0x87, 0x6d, 0xf6, 0xa1, 0x30, 0xfa, 0x6f, 0x14, 0xf0, 0x1e, 0xe0,
	0xd4, 0xd8, 0x9e, 0x0a, 0x20, 0xf1, 0xd5, 0x71, 0xcd, 0x55, 0x25, 0xb0, 0xb5, 0xb3, 0x41, 0xa2,
	0xaa, 0xb1, 0x16, 0x4f, 0x56, 0x04, 0xd1, 0xde, 0x82, 0x97, 0xd5, 0x2d, 0xb0, 0x61, 0xe1, 0x18,
	0x12, 0x29, 0x6d, 0xc3, 0x6c, 0x92, 0x12, 0xde, 0x80, 0xc9, 0x8c, 0x1a, 0x27, 0x12, 0x5c, 0x8c,
	0x15, 0x28, 0xdf, 0xec, 0x0a, 0xef, 0x6e, 0x04, 0xd8, 0xe6, 0x32, 0x0c, 0xb8, 0xdb, 0x1b, 0xec,
	0x85, 0xb8, 0x25, 0xdf, 0x10, 0x58, 0x4e, 0x85, 0x20, 0x17, 0x01, 0x8b, 0x6c, 0x00, 0xb1, 0x91,
	0x91, 0x9f, 0x00, 0x61, 0xab, 0x2a, 0x7a, 0x62, 0x29, 0x95, 0xb1, 0x6d, 0x0b, 0x4c, 0x1f, 0x36,
	0xee, 0x80, 0x91, 0x96, 0x99, 0xe8, 0x66, 0x09, 0x5e, 0x8a, 0x4e, 0xda, 0x89, 0x37, 0xcb, 0x93,
	0x67, 0x5a, 0x84, 0x17, 0x55, 0xf1, 0x1d, 0xbf, 0x38, 0xad, 0xda, 0x1d, 0x3f, 0x1a, 0xf7, 0x09,
	0x9c, 0x19, 0x5b, 0x1c, 0x45, 0xf3, 0xf1, 0xa2, 0x49, 0x6e, 0xd1, 0xe9, 0x72, 0x97, 0xa0, 0x74,
	0xb3, 0xc5, 0x9b, 0xdc, 0xe5, 0x2d, 0x1e, 0xf6, 0xb7, 0x02, 0x1e, 0xb2, 0x80, 0x3b, 0xf1, 0x1b,
	0xfa, 0x82, 0xc0, 0x69, 0x6d, 0x18, 0x89, 0xba, 0x50, 0x60, 0xc3, 0xb0, 0xed, 0x61, 0x1c, 0x5f,
	0xcc, 0xb9, 0x14, 0x8e, 0xc7, 0x0b, 0xe2, 0x4b, 0x99, 0x67, 0xc7, 0x43, 0xc6, 0x75, 0x78, 0x33,
	0x9d, 0x61, 0xbd, 0xff, 0xbe, 0xd3, 0x8e, 0x57, 0x06, 0xa5, 0x30, 0xd3, 0x71, 0xda, 0x0c, 0xdb,
	0xae, 0x3e, 0x1b, 0x5f, 0x11, 0x58, 0x9b, 0x9c, 0x8f, 0x7a, 0x3e, 0x4e, 0xd5, 0x43, 0x72, 0xe9,
	0xd1, 0x2a, 0xa9, 0xfd, 0x36, 0x07, 0xcf, 0xab, 0x8d, 0x46, 0x7f, 0x20, 0xf0, 0xea, 0x31, 0x0f,
	0xa2, 0x66, 0x96, 0x85, 0x3a, 0x1c, 0xc2, 0x92, 0x95, 0x19, 0x1f, 0xc9, 0x33, 0xae, 0x7c, 0xf9,
	0xfb, 0x3f, 0x0f, 0xa6, 0x6b, 0x74, 0xc3, 0x3a, 0xe6, 0xa8, 0x72, 0x68, 0xa9, 0xf1, 0x9e, 0xb7,
	0xdd, 0xbe, 0xcd, 0x7d, 0x6b, 0x8f, 0xfb, 0xfb, 0xf4, 0x5b, 0x02, 0x73, 0xa3, 0xfe, 0x40, 0x2f,
	0x64, 0x38, 0x3d, 0xde, 0x7e, 0xa5, 0xf5, 0x6c, 0x60, 0xe4, 0x69, 0x2a, 0x9e, 0x6b, 0xf4, 0x6c,
	0x26, 0x9e, 0x92, 0xfe, 0x44, 0xa0, 0xa0, 0xf3, 0x30, 0x5a, 0xd5, 0x1f, 0x3b, 0xc6, 0x0e, 0x4b,
	0xb5, 0x3c, 0x29, 0xc8, 0xf7, 0x92, 0xe2, 0x6b, 0xd1, 0x4a, 0x0a, 0x5f, 0x47, 0x25, 0xdb, 0x47,
	0x69, 0xff, 0x42, 0xa0, 0xa0, 0x33, 0x37, 0x7a, 0x59, 0xcf, 0x61, 0x92, 0x65, 0x96, 0xde, 0xca,
	0x9d, 0x97, 0x51, 0x40, 0x64, 0x74, 0xb6, 0x13, 0x65, 0xdb, 0x2e, 0xf2, 0x7c, 0x40, 0x60, 0x36,
	0x69, 0x6a, 0xf4, 0xdc, 0x44, 0x8f, 0x78, 0xd2, 0xe7, 0xf3, 0x59, 0xa0, 0x48, 0x6f, 0x5d, 0xd1,
	0x3b, 0x4b, 0xdf, 0x18, 0x3f, 0x0f, 0x91, 0x81, 0xd2, 0xef, 0x08, 0x9c, 0x3c, 0x62, 0x6d, 0x74,
	0x7d, 0xb2, 0x9d, 0x26, 0x2e, 0x56, 0x25, 0x23, 0x1a, 0xe9, 0x5d, 0x56, 0xf4, 0x36, 0xa8, 0x99,
	0x81, 0x5e, 0xf2, 0x52, 0xfd, 0x4a, 0xa0, 0x98, 0xb2, 0xb0, 0x25, 0xbd, 0x98, 0x6f, 0xc1, 0x23,
	0xf3, 0x4b, 0x39, 0xb3, 0x50, 0xc1, 0x55, 0xa5, 0x60, 0x93, 0x56, 0x53, 0x14, 0xa4, 0xba, 0x91,
	0xa4, 0xff, 0x12, 0x58, 0x4a, 0x13, 0xa1, 0x5a, 0x7f, 0x25, 0x9f, 0x3d, 0x27, 0x5e, 0xc3, 0xd5,
	0xa7, 0xc8, 0x44, 0x41, 0x1f, 0x29, 0x41, 0x1f, 0xd0, 0x5b, 0xb9, 0x05, 0x59, 0x7b, 0xb1, 0x91,
	0xef, 0x47, 0x28, 0x69, 0xed, 0xa1, 0x7f, 0xef, 0xd3, 0x1f, 0x09, 0xcc, 0x6b, 0xd6, 0x3d, 0xdd,
	0xc8, 0xee, 0x0c, 0xa8, 0xad, 0x9a, 0x23, 0x03, 0x35, 0x6d, 0x2a, 0x4d, 0x15, 0x7a, 0x21, 0x4d,
	0x93, 0xc6, 0xb9, 0xe8, 0x1f, 0x04, 0x16, 0x75, 0x86, 0xab, 0x7c, 0x8f, 0x5e, 0xcf, 0xcb, 0x7b,
	0xc4, 0x6f, 0x4b, 0x6f, 0x3f, 0x6d, 0x3a, 0x2a, 0xba, 0xa6, 0x14, 0x5d, 0xa4, 0xb5, 0x1c, 0x8a,
	0xac, 0xbd, 0x81, 0xad, 0xef, 0xd7, 0x9b, 0x0f, 0x0f, 0xca, 0xe4, 0xd1, 0x41, 0x99, 0xfc, 0x7d,
	0x50, 0x26, 0xf7, 0x0f, 0xcb, 0x53, 0x8f, 0x0e, 0xcb, 0x53, 0x7f, 0x1e, 0x96, 0xa7, 0x60, 0x81,
	0x0b, 0x2d, 0xaf, 0xdb, 0xe4, 0x4e, 0x2d, 0xf1, 0xdd, 0x7e, 0x08, 0xa9, 0x70, 0x91, 0x24, 0xf0,
	0x79, 0xfc, 0x23, 0x53, 0x7d, 0xd7, 0x77, 0x5f, 0x50, 0xbf, 0x30, 0x37, 0xff, 0x0f, 0x00, 0x00,
	0xff, 0xff, 0x55, 0xa1, 0x8a, 0xa4, 0x53, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// returns RewardProgram by id
	RewardProgramByID(ctx context.Context, in *RewardProgramByIDRequest, opts ...grpc.CallOption) (*RewardProgramByIDResponse, error)
	// returns RewardPrograms both upcoming and active
	RewardPrograms(ctx context.Context, in *RewardProgramsRequest, opts ...grpc.CallOption) (*RewardProgramsResponse, error)
	// returns active RewardPrograms
	ActiveRewardPrograms(ctx context.Context, in *ActiveRewardProgramsRequest, opts ...grpc.CallOption) (*ActiveRewardProgramsResponse, error)
	ModuleAccountBalance(ctx context.Context, in *QueryModuleAccountBalanceRequest, opts ...grpc.CallOption) (*QueryModuleAccountBalanceResponse, error)
	// returns all RewardClaims
	RewardClaims(ctx context.Context, in *RewardClaimsRequest, opts ...grpc.CallOption) (*RewardClaimsResponse, error)
	// returns a RewardClaim by id
	RewardClaimByID(ctx context.Context, in *RewardClaimByIDRequest, opts ...grpc.CallOption) (*RewardClaimByIDResponse, error)
	// returns all EpochRewardDistributions
	EpochRewardDistributions(ctx context.Context, in *EpochRewardDistributionRequest, opts ...grpc.CallOption) (*EpochRewardDistributionResponse, error)
	// returns a EpochRewardDistribution by rewardId and epochId
	EpochRewardDistributionsByID(ctx context.Context, in *EpochRewardDistributionByIDRequest, opts ...grpc.CallOption) (*EpochRewardDistributionByIDResponse, error)
	// returns all EligibilityCriterias
	EligibilityCriteria(ctx context.Context, in *EligibilityCriteriaRequest, opts ...grpc.CallOption) (*EligibilityCriteriaResponse, error)
	// returns a EligibilityCriteria by name
	EligibilityCriteriaByName(ctx context.Context, in *EligibilityCriteriaRequestByNameRequest, opts ...grpc.CallOption) (*EligibilityCriteriaRequestByNameResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) RewardProgramByID(ctx context.Context, in *RewardProgramByIDRequest, opts ...grpc.CallOption) (*RewardProgramByIDResponse, error) {
	out := new(RewardProgramByIDResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Query/RewardProgramByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardPrograms(ctx context.Context, in *RewardProgramsRequest, opts ...grpc.CallOption) (*RewardProgramsResponse, error) {
	out := new(RewardProgramsResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Query/RewardPrograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActiveRewardPrograms(ctx context.Context, in *ActiveRewardProgramsRequest, opts ...grpc.CallOption) (*ActiveRewardProgramsResponse, error) {
	out := new(ActiveRewardProgramsResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Query/ActiveRewardPrograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ModuleAccountBalance(ctx context.Context, in *QueryModuleAccountBalanceRequest, opts ...grpc.CallOption) (*QueryModuleAccountBalanceResponse, error) {
	out := new(QueryModuleAccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Query/ModuleAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardClaims(ctx context.Context, in *RewardClaimsRequest, opts ...grpc.CallOption) (*RewardClaimsResponse, error) {
	out := new(RewardClaimsResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Query/RewardClaims", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardClaimByID(ctx context.Context, in *RewardClaimByIDRequest, opts ...grpc.CallOption) (*RewardClaimByIDResponse, error) {
	out := new(RewardClaimByIDResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Query/RewardClaimByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochRewardDistributions(ctx context.Context, in *EpochRewardDistributionRequest, opts ...grpc.CallOption) (*EpochRewardDistributionResponse, error) {
	out := new(EpochRewardDistributionResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Query/EpochRewardDistributions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochRewardDistributionsByID(ctx context.Context, in *EpochRewardDistributionByIDRequest, opts ...grpc.CallOption) (*EpochRewardDistributionByIDResponse, error) {
	out := new(EpochRewardDistributionByIDResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Query/EpochRewardDistributionsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EligibilityCriteria(ctx context.Context, in *EligibilityCriteriaRequest, opts ...grpc.CallOption) (*EligibilityCriteriaResponse, error) {
	out := new(EligibilityCriteriaResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Query/EligibilityCriteria", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EligibilityCriteriaByName(ctx context.Context, in *EligibilityCriteriaRequestByNameRequest, opts ...grpc.CallOption) (*EligibilityCriteriaRequestByNameResponse, error) {
	out := new(EligibilityCriteriaRequestByNameResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Query/EligibilityCriteriaByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// returns RewardProgram by id
	RewardProgramByID(context.Context, *RewardProgramByIDRequest) (*RewardProgramByIDResponse, error)
	// returns RewardPrograms both upcoming and active
	RewardPrograms(context.Context, *RewardProgramsRequest) (*RewardProgramsResponse, error)
	// returns active RewardPrograms
	ActiveRewardPrograms(context.Context, *ActiveRewardProgramsRequest) (*ActiveRewardProgramsResponse, error)
	ModuleAccountBalance(context.Context, *QueryModuleAccountBalanceRequest) (*QueryModuleAccountBalanceResponse, error)
	// returns all RewardClaims
	RewardClaims(context.Context, *RewardClaimsRequest) (*RewardClaimsResponse, error)
	// returns a RewardClaim by id
	RewardClaimByID(context.Context, *RewardClaimByIDRequest) (*RewardClaimByIDResponse, error)
	// returns all EpochRewardDistributions
	EpochRewardDistributions(context.Context, *EpochRewardDistributionRequest) (*EpochRewardDistributionResponse, error)
	// returns a EpochRewardDistribution by rewardId and epochId
	EpochRewardDistributionsByID(context.Context, *EpochRewardDistributionByIDRequest) (*EpochRewardDistributionByIDResponse, error)
	// returns all EligibilityCriterias
	EligibilityCriteria(context.Context, *EligibilityCriteriaRequest) (*EligibilityCriteriaResponse, error)
	// returns a EligibilityCriteria by name
	EligibilityCriteriaByName(context.Context, *EligibilityCriteriaRequestByNameRequest) (*EligibilityCriteriaRequestByNameResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) RewardProgramByID(ctx context.Context, req *RewardProgramByIDRequest) (*RewardProgramByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardProgramByID not implemented")
}
func (*UnimplementedQueryServer) RewardPrograms(ctx context.Context, req *RewardProgramsRequest) (*RewardProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardPrograms not implemented")
}
func (*UnimplementedQueryServer) ActiveRewardPrograms(ctx context.Context, req *ActiveRewardProgramsRequest) (*ActiveRewardProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveRewardPrograms not implemented")
}
func (*UnimplementedQueryServer) ModuleAccountBalance(ctx context.Context, req *QueryModuleAccountBalanceRequest) (*QueryModuleAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleAccountBalance not implemented")
}
func (*UnimplementedQueryServer) RewardClaims(ctx context.Context, req *RewardClaimsRequest) (*RewardClaimsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardClaims not implemented")
}
func (*UnimplementedQueryServer) RewardClaimByID(ctx context.Context, req *RewardClaimByIDRequest) (*RewardClaimByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardClaimByID not implemented")
}
func (*UnimplementedQueryServer) EpochRewardDistributions(ctx context.Context, req *EpochRewardDistributionRequest) (*EpochRewardDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochRewardDistributions not implemented")
}
func (*UnimplementedQueryServer) EpochRewardDistributionsByID(ctx context.Context, req *EpochRewardDistributionByIDRequest) (*EpochRewardDistributionByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochRewardDistributionsByID not implemented")
}
func (*UnimplementedQueryServer) EligibilityCriteria(ctx context.Context, req *EligibilityCriteriaRequest) (*EligibilityCriteriaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EligibilityCriteria not implemented")
}
func (*UnimplementedQueryServer) EligibilityCriteriaByName(ctx context.Context, req *EligibilityCriteriaRequestByNameRequest) (*EligibilityCriteriaRequestByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EligibilityCriteriaByName not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_RewardProgramByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardProgramByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardProgramByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Query/RewardProgramByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardProgramByID(ctx, req.(*RewardProgramByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardPrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardProgramsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardPrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Query/RewardPrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardPrograms(ctx, req.(*RewardProgramsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActiveRewardPrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveRewardProgramsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActiveRewardPrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Query/ActiveRewardPrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActiveRewardPrograms(ctx, req.(*ActiveRewardProgramsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ModuleAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModuleAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModuleAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Query/ModuleAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModuleAccountBalance(ctx, req.(*QueryModuleAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardClaims_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardClaimsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardClaims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Query/RewardClaims",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardClaims(ctx, req.(*RewardClaimsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardClaimByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardClaimByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardClaimByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Query/RewardClaimByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardClaimByID(ctx, req.(*RewardClaimByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochRewardDistributions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpochRewardDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochRewardDistributions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Query/EpochRewardDistributions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochRewardDistributions(ctx, req.(*EpochRewardDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochRewardDistributionsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpochRewardDistributionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochRewardDistributionsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Query/EpochRewardDistributionsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochRewardDistributionsByID(ctx, req.(*EpochRewardDistributionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EligibilityCriteria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EligibilityCriteriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EligibilityCriteria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Query/EligibilityCriteria",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EligibilityCriteria(ctx, req.(*EligibilityCriteriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EligibilityCriteriaByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EligibilityCriteriaRequestByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EligibilityCriteriaByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Query/EligibilityCriteriaByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EligibilityCriteriaByName(ctx, req.(*EligibilityCriteriaRequestByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.reward.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RewardProgramByID",
			Handler:    _Query_RewardProgramByID_Handler,
		},
		{
			MethodName: "RewardPrograms",
			Handler:    _Query_RewardPrograms_Handler,
		},
		{
			MethodName: "ActiveRewardPrograms",
			Handler:    _Query_ActiveRewardPrograms_Handler,
		},
		{
			MethodName: "ModuleAccountBalance",
			Handler:    _Query_ModuleAccountBalance_Handler,
		},
		{
			MethodName: "RewardClaims",
			Handler:    _Query_RewardClaims_Handler,
		},
		{
			MethodName: "RewardClaimByID",
			Handler:    _Query_RewardClaimByID_Handler,
		},
		{
			MethodName: "EpochRewardDistributions",
			Handler:    _Query_EpochRewardDistributions_Handler,
		},
		{
			MethodName: "EpochRewardDistributionsByID",
			Handler:    _Query_EpochRewardDistributionsByID_Handler,
		},
		{
			MethodName: "EligibilityCriteria",
			Handler:    _Query_EligibilityCriteria_Handler,
		},
		{
			MethodName: "EligibilityCriteriaByName",
			Handler:    _Query_EligibilityCriteriaByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/reward/v1/query.proto",
}

func (m *RewardProgramByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardProgramByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardProgramByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardProgramByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardProgramByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardProgramByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardProgram != nil {
		{
			size, err := m.RewardProgram.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardProgramsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardProgramsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardProgramsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RewardProgramsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardProgramsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardProgramsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardPrograms) > 0 {
		for iNdEx := len(m.RewardPrograms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardPrograms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActiveRewardProgramsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveRewardProgramsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveRewardProgramsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ActiveRewardProgramsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveRewardProgramsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveRewardProgramsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardPrograms) > 0 {
		for iNdEx := len(m.RewardPrograms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardPrograms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryModuleAccountBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleAccountBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleAccountBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModuleAccountBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleAccountBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleAccountBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModuleAccountBalance) > 0 {
		for iNdEx := len(m.ModuleAccountBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ModuleAccountBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RewardClaimsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardClaimsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardClaimsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RewardClaimsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardClaimsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardClaimsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardClaims) > 0 {
		for iNdEx := len(m.RewardClaims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardClaims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RewardClaimByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardClaimByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardClaimByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardClaimByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardClaimByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardClaimByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardClaim != nil {
		{
			size, err := m.RewardClaim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EpochRewardDistributionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochRewardDistributionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochRewardDistributionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EpochRewardDistributionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochRewardDistributionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochRewardDistributionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochRewardDistribution) > 0 {
		for iNdEx := len(m.EpochRewardDistribution) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochRewardDistribution[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EpochRewardDistributionByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochRewardDistributionByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochRewardDistributionByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochId) > 0 {
		i -= len(m.EpochId)
		copy(dAtA[i:], m.EpochId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EpochId)))
		i--
		dAtA[i] = 0x12
	}
	if m.RewardId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RewardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochRewardDistributionByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochRewardDistributionByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochRewardDistributionByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochRewardDistribution != nil {
		{
			size, err := m.EpochRewardDistribution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EligibilityCriteriaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EligibilityCriteriaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EligibilityCriteriaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EligibilityCriteriaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EligibilityCriteriaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EligibilityCriteriaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EligibilityCriteria) > 0 {
		for iNdEx := len(m.EligibilityCriteria) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EligibilityCriteria[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EligibilityCriteriaRequestByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EligibilityCriteriaRequestByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EligibilityCriteriaRequestByNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *EligibilityCriteriaRequestByNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EligibilityCriteriaRequestByNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EligibilityCriteriaRequestByNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EligibilityCriteria != nil {
		{
			size, err := m.EligibilityCriteria.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardProgramByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *RewardProgramByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardProgram != nil {
		l = m.RewardProgram.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RewardProgramsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RewardProgramsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardPrograms) > 0 {
		for _, e := range m.RewardPrograms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ActiveRewardProgramsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ActiveRewardProgramsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardPrograms) > 0 {
		for _, e := range m.RewardPrograms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryModuleAccountBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModuleAccountBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ModuleAccountBalance) > 0 {
		for _, e := range m.ModuleAccountBalance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *RewardClaimsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RewardClaimsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardClaims) > 0 {
		for _, e := range m.RewardClaims {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *RewardClaimByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RewardClaimByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardClaim != nil {
		l = m.RewardClaim.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *EpochRewardDistributionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EpochRewardDistributionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EpochRewardDistribution) > 0 {
		for _, e := range m.EpochRewardDistribution {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *EpochRewardDistributionByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardId != 0 {
		n += 1 + sovQuery(uint64(m.RewardId))
	}
	l = len(m.EpochId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *EpochRewardDistributionByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochRewardDistribution != nil {
		l = m.EpochRewardDistribution.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *EligibilityCriteriaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EligibilityCriteriaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EligibilityCriteria) > 0 {
		for _, e := range m.EligibilityCriteria {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *EligibilityCriteriaRequestByNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *EligibilityCriteriaRequestByNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EligibilityCriteria != nil {
		l = m.EligibilityCriteria.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardProgramByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardProgramByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardProgramByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardProgramByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardProgramByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardProgramByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgram", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardProgram == nil {
				m.RewardProgram = &RewardProgram{}
			}
			if err := m.RewardProgram.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardProgramsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardProgramsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardProgramsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardProgramsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardProgramsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardProgramsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPrograms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPrograms = append(m.RewardPrograms, RewardProgram{})
			if err := m.RewardPrograms[len(m.RewardPrograms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveRewardProgramsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveRewardProgramsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveRewardProgramsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveRewardProgramsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveRewardProgramsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveRewardProgramsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPrograms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPrograms = append(m.RewardPrograms, RewardProgram{})
			if err := m.RewardPrograms[len(m.RewardPrograms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleAccountBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleAccountBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleAccountBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleAccountBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleAccountBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleAccountBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAccountBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleAccountBalance = append(m.ModuleAccountBalance, types.Coin{})
			if err := m.ModuleAccountBalance[len(m.ModuleAccountBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardClaimsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardClaimsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardClaimsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardClaimsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardClaimsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardClaimsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardClaims = append(m.RewardClaims, RewardClaim{})
			if err := m.RewardClaims[len(m.RewardClaims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardClaimByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardClaimByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardClaimByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardClaimByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardClaimByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardClaimByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardClaim == nil {
				m.RewardClaim = &RewardClaim{}
			}
			if err := m.RewardClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochRewardDistributionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochRewardDistributionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochRewardDistributionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochRewardDistributionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochRewardDistributionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochRewardDistributionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochRewardDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochRewardDistribution = append(m.EpochRewardDistribution, EpochRewardDistribution{})
			if err := m.EpochRewardDistribution[len(m.EpochRewardDistribution)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochRewardDistributionByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochRewardDistributionByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochRewardDistributionByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			m.RewardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochRewardDistributionByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochRewardDistributionByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochRewardDistributionByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochRewardDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EpochRewardDistribution == nil {
				m.EpochRewardDistribution = &EpochRewardDistribution{}
			}
			if err := m.EpochRewardDistribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EligibilityCriteriaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EligibilityCriteriaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EligibilityCriteriaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EligibilityCriteriaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EligibilityCriteriaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EligibilityCriteriaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EligibilityCriteria", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EligibilityCriteria = append(m.EligibilityCriteria, EligibilityCriteria{})
			if err := m.EligibilityCriteria[len(m.EligibilityCriteria)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EligibilityCriteriaRequestByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EligibilityCriteriaRequestByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EligibilityCriteriaRequestByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EligibilityCriteriaRequestByNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EligibilityCriteriaRequestByNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EligibilityCriteriaRequestByNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EligibilityCriteria", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EligibilityCriteria == nil {
				m.EligibilityCriteria = &EligibilityCriteria{}
			}
			if err := m.EligibilityCriteria.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
