// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/reward/v1/reward.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/provenance-io/provenance/x/epoch/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RewardProgram
type RewardProgram struct {
	Id                    uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DistributeFromAddress string               `protobuf:"bytes,2,opt,name=distribute_from_address,json=distributeFromAddress,proto3" json:"distribute_from_address,omitempty"`
	Coin                  types.Coin           `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin"`
	EpochId               string               `protobuf:"bytes,4,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	StartEpoch            uint64               `protobuf:"varint,5,opt,name=start_epoch,json=startEpoch,proto3" json:"start_epoch,omitempty"`
	NumberEpochs          uint64               `protobuf:"varint,6,opt,name=number_epochs,json=numberEpochs,proto3" json:"number_epochs,omitempty"`
	EligibilityCriteria   *EligibilityCriteria `protobuf:"bytes,7,opt,name=eligibility_criteria,json=eligibilityCriteria,proto3" json:"eligibility_criteria,omitempty"`
}

func (m *RewardProgram) Reset()      { *m = RewardProgram{} }
func (*RewardProgram) ProtoMessage() {}
func (*RewardProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{0}
}
func (m *RewardProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardProgram.Merge(m, src)
}
func (m *RewardProgram) XXX_Size() int {
	return m.Size()
}
func (m *RewardProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardProgram.DiscardUnknown(m)
}

var xxx_messageInfo_RewardProgram proto.InternalMessageInfo

func (m *RewardProgram) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RewardProgram) GetDistributeFromAddress() string {
	if m != nil {
		return m.DistributeFromAddress
	}
	return ""
}

func (m *RewardProgram) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

func (m *RewardProgram) GetEpochId() string {
	if m != nil {
		return m.EpochId
	}
	return ""
}

func (m *RewardProgram) GetStartEpoch() uint64 {
	if m != nil {
		return m.StartEpoch
	}
	return 0
}

func (m *RewardProgram) GetNumberEpochs() uint64 {
	if m != nil {
		return m.NumberEpochs
	}
	return 0
}

func (m *RewardProgram) GetEligibilityCriteria() *EligibilityCriteria {
	if m != nil {
		return m.EligibilityCriteria
	}
	return nil
}

// EpochRewardDistribution, this will updated at the end of every epoch
type EpochRewardDistribution struct {
	EpochId          string     `protobuf:"bytes,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	RewardProgramId  uint64     `protobuf:"varint,2,opt,name=reward_program_id,json=rewardProgramId,proto3" json:"reward_program_id,omitempty"`
	TotalRewardsPool types.Coin `protobuf:"bytes,3,opt,name=total_rewards_pool,json=totalRewardsPool,proto3" json:"total_rewards_pool" yaml:"total_rewards_pool"`
	TotalShares      int64      `protobuf:"varint,4,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	EpochEnded       bool       `protobuf:"varint,5,opt,name=epoch_ended,json=epochEnded,proto3" json:"epoch_ended,omitempty"`
}

func (m *EpochRewardDistribution) Reset()      { *m = EpochRewardDistribution{} }
func (*EpochRewardDistribution) ProtoMessage() {}
func (*EpochRewardDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{1}
}
func (m *EpochRewardDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochRewardDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochRewardDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochRewardDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochRewardDistribution.Merge(m, src)
}
func (m *EpochRewardDistribution) XXX_Size() int {
	return m.Size()
}
func (m *EpochRewardDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochRewardDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_EpochRewardDistribution proto.InternalMessageInfo

func (m *EpochRewardDistribution) GetEpochId() string {
	if m != nil {
		return m.EpochId
	}
	return ""
}

func (m *EpochRewardDistribution) GetRewardProgramId() uint64 {
	if m != nil {
		return m.RewardProgramId
	}
	return 0
}

func (m *EpochRewardDistribution) GetTotalRewardsPool() types.Coin {
	if m != nil {
		return m.TotalRewardsPool
	}
	return types.Coin{}
}

func (m *EpochRewardDistribution) GetTotalShares() int64 {
	if m != nil {
		return m.TotalShares
	}
	return 0
}

func (m *EpochRewardDistribution) GetEpochEnded() bool {
	if m != nil {
		return m.EpochEnded
	}
	return false
}

// A RewardClaim is the metadata of reward data per address
type RewardClaim struct {
	// address of user reward
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	// array of shares calculated per epoch for each reward program
	SharesPerEpochPerReward []*SharesPerEpochPerRewardsProgram `protobuf:"bytes,4,rep,name=shares_per_epoch_per_reward,json=sharesPerEpochPerReward,proto3" json:"shares_per_epoch_per_reward,omitempty"`
}

func (m *RewardClaim) Reset()      { *m = RewardClaim{} }
func (*RewardClaim) ProtoMessage() {}
func (*RewardClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{2}
}
func (m *RewardClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardClaim.Merge(m, src)
}
func (m *RewardClaim) XXX_Size() int {
	return m.Size()
}
func (m *RewardClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardClaim.DiscardUnknown(m)
}

var xxx_messageInfo_RewardClaim proto.InternalMessageInfo

func (m *RewardClaim) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RewardClaim) GetSharesPerEpochPerReward() []*SharesPerEpochPerRewardsProgram {
	if m != nil {
		return m.SharesPerEpochPerReward
	}
	return nil
}

type SharesPerEpochPerRewardsProgram struct {
	RewardProgramId  uint64     `protobuf:"varint,1,opt,name=reward_program_id,json=rewardProgramId,proto3" json:"reward_program_id,omitempty"`
	Shares           int64      `protobuf:"varint,2,opt,name=shares,proto3" json:"shares,omitempty"`
	EpochId          string     `protobuf:"bytes,3,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	EpochEndHeight   uint64     `protobuf:"varint,4,opt,name=epoch_end_height,json=epochEndHeight,proto3" json:"epoch_end_height,omitempty"`
	Claimed          bool       `protobuf:"varint,5,opt,name=claimed,proto3" json:"claimed,omitempty"`
	ExpirationHeight uint64     `protobuf:"varint,6,opt,name=expiration_height,json=expirationHeight,proto3" json:"expiration_height,omitempty"`
	Expired          bool       `protobuf:"varint,7,opt,name=expired,proto3" json:"expired,omitempty"`
	TotalShares      int64      `protobuf:"varint,8,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	TotalRewards     types.Coin `protobuf:"bytes,9,opt,name=total_rewards,json=totalRewards,proto3" json:"total_rewards" yaml:"total_rewards"`
}

func (m *SharesPerEpochPerRewardsProgram) Reset()      { *m = SharesPerEpochPerRewardsProgram{} }
func (*SharesPerEpochPerRewardsProgram) ProtoMessage() {}
func (*SharesPerEpochPerRewardsProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{3}
}
func (m *SharesPerEpochPerRewardsProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SharesPerEpochPerRewardsProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SharesPerEpochPerRewardsProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SharesPerEpochPerRewardsProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SharesPerEpochPerRewardsProgram.Merge(m, src)
}
func (m *SharesPerEpochPerRewardsProgram) XXX_Size() int {
	return m.Size()
}
func (m *SharesPerEpochPerRewardsProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_SharesPerEpochPerRewardsProgram.DiscardUnknown(m)
}

var xxx_messageInfo_SharesPerEpochPerRewardsProgram proto.InternalMessageInfo

func (m *SharesPerEpochPerRewardsProgram) GetRewardProgramId() uint64 {
	if m != nil {
		return m.RewardProgramId
	}
	return 0
}

func (m *SharesPerEpochPerRewardsProgram) GetShares() int64 {
	if m != nil {
		return m.Shares
	}
	return 0
}

func (m *SharesPerEpochPerRewardsProgram) GetEpochId() string {
	if m != nil {
		return m.EpochId
	}
	return ""
}

func (m *SharesPerEpochPerRewardsProgram) GetEpochEndHeight() uint64 {
	if m != nil {
		return m.EpochEndHeight
	}
	return 0
}

func (m *SharesPerEpochPerRewardsProgram) GetClaimed() bool {
	if m != nil {
		return m.Claimed
	}
	return false
}

func (m *SharesPerEpochPerRewardsProgram) GetExpirationHeight() uint64 {
	if m != nil {
		return m.ExpirationHeight
	}
	return 0
}

func (m *SharesPerEpochPerRewardsProgram) GetExpired() bool {
	if m != nil {
		return m.Expired
	}
	return false
}

func (m *SharesPerEpochPerRewardsProgram) GetTotalShares() int64 {
	if m != nil {
		return m.TotalShares
	}
	return 0
}

func (m *SharesPerEpochPerRewardsProgram) GetTotalRewards() types.Coin {
	if m != nil {
		return m.TotalRewards
	}
	return types.Coin{}
}

// ActionDelegate, accounts that have delegated in an epoch period.
// rule: ActionDelegate " when account delegates in epoch period,
// if above min and below max, increase shares earned for rewards pool by 1.
type ActionDelegate struct {
	Minimum int64 `protobuf:"varint,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum int64 `protobuf:"varint,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (m *ActionDelegate) Reset()      { *m = ActionDelegate{} }
func (*ActionDelegate) ProtoMessage() {}
func (*ActionDelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{4}
}
func (m *ActionDelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionDelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionDelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionDelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionDelegate.Merge(m, src)
}
func (m *ActionDelegate) XXX_Size() int {
	return m.Size()
}
func (m *ActionDelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionDelegate.DiscardUnknown(m)
}

var xxx_messageInfo_ActionDelegate proto.InternalMessageInfo

func (m *ActionDelegate) GetMinimum() int64 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *ActionDelegate) GetMaximum() int64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

// accounts that have made transfers, from accounts that have active delegations
// rule: ActionTransferDelegations "When transfer has occurred and the account has an active delegation,
// give it a share of the rewards pool, assuming it has not gone over max value and is above a min value" {
type ActionTransferDelegations struct {
	Minimum int64 `protobuf:"varint,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum int64 `protobuf:"varint,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (m *ActionTransferDelegations) Reset()      { *m = ActionTransferDelegations{} }
func (*ActionTransferDelegations) ProtoMessage() {}
func (*ActionTransferDelegations) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{5}
}
func (m *ActionTransferDelegations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionTransferDelegations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionTransferDelegations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionTransferDelegations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionTransferDelegations.Merge(m, src)
}
func (m *ActionTransferDelegations) XXX_Size() int {
	return m.Size()
}
func (m *ActionTransferDelegations) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionTransferDelegations.DiscardUnknown(m)
}

var xxx_messageInfo_ActionTransferDelegations proto.InternalMessageInfo

func (m *ActionTransferDelegations) GetMinimum() int64 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *ActionTransferDelegations) GetMaximum() int64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

// EligibilityCriteria defines an Action which accrues rewards for a running RewardProgram
type EligibilityCriteria struct {
	Name   string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Action *types1.Any `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (m *EligibilityCriteria) Reset()      { *m = EligibilityCriteria{} }
func (*EligibilityCriteria) ProtoMessage() {}
func (*EligibilityCriteria) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{6}
}
func (m *EligibilityCriteria) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EligibilityCriteria) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EligibilityCriteria.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EligibilityCriteria) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EligibilityCriteria.Merge(m, src)
}
func (m *EligibilityCriteria) XXX_Size() int {
	return m.Size()
}
func (m *EligibilityCriteria) XXX_DiscardUnknown() {
	xxx_messageInfo_EligibilityCriteria.DiscardUnknown(m)
}

var xxx_messageInfo_EligibilityCriteria proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RewardProgram)(nil), "provenance.reward.v1.RewardProgram")
	proto.RegisterType((*EpochRewardDistribution)(nil), "provenance.reward.v1.EpochRewardDistribution")
	proto.RegisterType((*RewardClaim)(nil), "provenance.reward.v1.RewardClaim")
	proto.RegisterType((*SharesPerEpochPerRewardsProgram)(nil), "provenance.reward.v1.SharesPerEpochPerRewardsProgram")
	proto.RegisterType((*ActionDelegate)(nil), "provenance.reward.v1.ActionDelegate")
	proto.RegisterType((*ActionTransferDelegations)(nil), "provenance.reward.v1.ActionTransferDelegations")
	proto.RegisterType((*EligibilityCriteria)(nil), "provenance.reward.v1.EligibilityCriteria")
}

func init() { proto.RegisterFile("provenance/reward/v1/reward.proto", fileDescriptor_0c3894741a216575) }

var fileDescriptor_0c3894741a216575 = []byte{
	// 828 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0x9d, 0xd0, 0x64, 0x27, 0x69, 0xe8, 0xce, 0x06, 0xe2, 0x2c, 0x28, 0x4e, 0xc3, 0x25,
	0xc0, 0x62, 0x2b, 0x59, 0xc1, 0xa1, 0xb7, 0xb6, 0x5b, 0xc4, 0x5e, 0x50, 0x64, 0xb8, 0x80, 0x56,
	0xb2, 0xc6, 0xf6, 0xd4, 0x19, 0x64, 0x7b, 0xac, 0x19, 0x27, 0x34, 0xff, 0x80, 0x23, 0x47, 0xc4,
	0xa9, 0xbf, 0x83, 0x5f, 0xb0, 0xc7, 0xbd, 0x20, 0x71, 0xaa, 0x50, 0x7b, 0xe1, 0xdc, 0x5f, 0x80,
	0xfc, 0xc6, 0x6e, 0x12, 0xc5, 0x52, 0x0f, 0x7b, 0x9b, 0xf7, 0xde, 0xe7, 0xe7, 0xef, 0x7d, 0xdf,
	0xb3, 0x07, 0x1d, 0xa7, 0x82, 0xaf, 0x68, 0x42, 0x12, 0x9f, 0xda, 0x82, 0xfe, 0x4a, 0x44, 0x60,
	0xaf, 0xa6, 0xc5, 0xc9, 0x4a, 0x05, 0xcf, 0x38, 0xee, 0x6d, 0x20, 0x56, 0x51, 0x58, 0x4d, 0x9f,
	0xf7, 0x42, 0x1e, 0x72, 0x00, 0xd8, 0xf9, 0x49, 0x61, 0x9f, 0x0f, 0x42, 0xce, 0xc3, 0x88, 0xda,
	0x10, 0x79, 0xcb, 0x4b, 0x9b, 0x24, 0xeb, 0xa2, 0x34, 0xf4, 0xb9, 0x8c, 0xb9, 0xb4, 0x3d, 0x22,
	0xa9, 0xbd, 0x9a, 0x7a, 0x34, 0x23, 0x53, 0xdb, 0xe7, 0x2c, 0x29, 0xea, 0xdb, 0x4c, 0x68, 0xca,
	0xfd, 0x45, 0x4e, 0x24, 0xa4, 0x09, 0x95, 0x4c, 0x2a, 0xc8, 0xf8, 0x6f, 0x1d, 0x1d, 0x3a, 0xc0,
	0x60, 0x2e, 0x78, 0x28, 0x48, 0x8c, 0xbb, 0x48, 0x67, 0x81, 0xa1, 0x8d, 0xb4, 0x49, 0xc3, 0xd1,
	0x59, 0x80, 0xbf, 0x41, 0xfd, 0x80, 0xc9, 0x4c, 0x30, 0x6f, 0x99, 0x51, 0xf7, 0x52, 0xf0, 0xd8,
	0x25, 0x41, 0x20, 0xa8, 0x94, 0x86, 0x3e, 0xd2, 0x26, 0x4f, 0x9c, 0x8f, 0x36, 0xe5, 0x6f, 0x05,
	0x8f, 0x4f, 0x55, 0x11, 0xbf, 0x44, 0x8d, 0x9c, 0x8a, 0x51, 0x1f, 0x69, 0x93, 0xf6, 0x6c, 0x60,
	0x29, 0xae, 0x56, 0xce, 0xd5, 0x2a, 0xb8, 0x5a, 0xe7, 0x9c, 0x25, 0x67, 0x8d, 0xb7, 0x37, 0x66,
	0xcd, 0x01, 0x30, 0x1e, 0xa0, 0x16, 0x10, 0x75, 0x59, 0x60, 0x34, 0xa0, 0x7b, 0x13, 0xe2, 0xd7,
	0x01, 0x36, 0x51, 0x5b, 0x66, 0x44, 0x64, 0x2e, 0x24, 0x8c, 0x0f, 0x80, 0x20, 0x82, 0xd4, 0x45,
	0x9e, 0xc1, 0x9f, 0xa1, 0xc3, 0x64, 0x19, 0x7b, 0x54, 0x28, 0x84, 0x34, 0x0e, 0x00, 0xd2, 0x51,
	0x49, 0xc0, 0x48, 0xfc, 0x06, 0xf5, 0x68, 0xc4, 0x42, 0xe6, 0xb1, 0x88, 0x65, 0x6b, 0xd7, 0x17,
	0x2c, 0xa3, 0x82, 0x11, 0xa3, 0x09, 0x2c, 0x3f, 0xb7, 0xaa, 0x8c, 0xb1, 0x2e, 0x36, 0x4f, 0x9c,
	0x17, 0x0f, 0x38, 0xcf, 0xe8, 0x7e, 0xf2, 0xa4, 0xf5, 0xc7, 0xb5, 0x59, 0xfb, 0xef, 0xda, 0xd4,
	0xc6, 0x7f, 0xea, 0xa8, 0x0f, 0xaf, 0x54, 0xe2, 0xbe, 0x2a, 0x25, 0x62, 0x7c, 0x77, 0x48, 0x6d,
	0x77, 0xc8, 0x2f, 0xd0, 0x53, 0xf5, 0x5a, 0x37, 0x55, 0x76, 0xe4, 0x18, 0x1d, 0xe6, 0xf8, 0x50,
	0x6c, 0xdb, 0xf4, 0x3a, 0xc0, 0xbf, 0x20, 0x9c, 0xf1, 0x8c, 0x44, 0xae, 0x2a, 0x48, 0x37, 0xe5,
	0x3c, 0x7a, 0x5c, 0xee, 0xe3, 0x5c, 0xee, 0xfb, 0x1b, 0x73, 0xb0, 0x26, 0x71, 0x74, 0x32, 0xde,
	0x6f, 0x31, 0x76, 0x8e, 0x20, 0xa9, 0x98, 0xcb, 0x39, 0xe7, 0x11, 0x3e, 0x46, 0x1d, 0x05, 0x94,
	0x0b, 0x22, 0xa8, 0x04, 0x6f, 0xea, 0x4e, 0x1b, 0x72, 0x3f, 0x40, 0x2a, 0xf7, 0x47, 0x4d, 0x45,
	0x93, 0x80, 0x06, 0xe0, 0x4f, 0xcb, 0x41, 0x90, 0xba, 0xc8, 0x33, 0x5b, 0xe2, 0xfc, 0xa5, 0xa1,
	0xb6, 0xea, 0x7e, 0x1e, 0x11, 0x16, 0xe3, 0x17, 0xa8, 0x59, 0xae, 0x14, 0xe8, 0x71, 0x86, 0xef,
	0x6f, 0xcc, 0xae, 0xe2, 0x57, 0x14, 0xc6, 0x4e, 0x09, 0xc1, 0x12, 0x7d, 0xa2, 0x58, 0xb8, 0x69,
	0xe9, 0x35, 0x9c, 0xd4, 0x0c, 0x46, 0x63, 0x54, 0x9f, 0xb4, 0x67, 0x5f, 0x57, 0x3b, 0xa9, 0xb8,
	0xce, 0x8b, 0x75, 0x98, 0x53, 0x51, 0x0e, 0xa9, 0x54, 0x75, 0xfa, 0xb2, 0x1a, 0xb0, 0xed, 0x6c,
	0x1d, 0x99, 0x8f, 0xb4, 0xa9, 0xb6, 0x51, 0xab, 0xb6, 0xf1, 0x63, 0x74, 0x50, 0x88, 0xaa, 0x83,
	0xa8, 0x45, 0xb4, 0xb3, 0x25, 0xf5, 0xdd, 0x2d, 0x99, 0xa0, 0xa3, 0x07, 0xa9, 0xdd, 0x05, 0x65,
	0xe1, 0x22, 0x03, 0x47, 0x1a, 0x4e, 0xb7, 0xd4, 0xfb, 0x3b, 0xc8, 0x62, 0x03, 0x35, 0xfd, 0x5c,
	0xe2, 0x07, 0x43, 0xca, 0x10, 0x7f, 0x89, 0x9e, 0xd2, 0xab, 0x94, 0x09, 0x92, 0xaf, 0x64, 0xd9,
	0x44, 0x7d, 0x31, 0x47, 0x9b, 0xc2, 0xa6, 0x0d, 0xe4, 0x68, 0x00, 0x1f, 0x4a, 0xcb, 0x29, 0xc3,
	0xbd, 0xc5, 0x68, 0xed, 0x2f, 0xc6, 0x1b, 0x74, 0xb8, 0xb3, 0x64, 0xc6, 0x93, 0xc7, 0x56, 0xf4,
	0xd3, 0x62, 0x45, 0x7b, 0x15, 0x2b, 0x3a, 0x76, 0x3a, 0xdb, 0xdb, 0x79, 0xd2, 0xf9, 0xed, 0xda,
	0xd4, 0x1e, 0xcc, 0xf9, 0x1e, 0x75, 0x4f, 0xfd, 0x9c, 0xf8, 0x2b, 0x1a, 0xd1, 0x90, 0x64, 0x34,
	0xa7, 0x1e, 0xb3, 0x84, 0xc5, 0xcb, 0x18, 0x0c, 0xa8, 0x3b, 0x65, 0x08, 0x15, 0x72, 0x05, 0x15,
	0xbd, 0xa8, 0xa8, 0x70, 0xcb, 0xec, 0x9f, 0xd0, 0x40, 0xf5, 0xfb, 0x51, 0x90, 0x44, 0x5e, 0x52,
	0x51, 0xf4, 0x65, 0x3c, 0x91, 0xef, 0xd9, 0x9a, 0xa2, 0x67, 0x15, 0xff, 0x15, 0x8c, 0x51, 0x23,
	0x21, 0x31, 0x2d, 0x7e, 0x0c, 0x70, 0xc6, 0x2f, 0xd0, 0x01, 0x01, 0x16, 0xd0, 0xad, 0x3d, 0xeb,
	0x59, 0xea, 0x4e, 0xb0, 0xca, 0x3b, 0xc1, 0x3a, 0x4d, 0xd6, 0x4e, 0x81, 0x01, 0x45, 0x6a, 0xe5,
	0x6b, 0xce, 0xc2, 0xb7, 0xb7, 0x43, 0xed, 0xdd, 0xed, 0x50, 0xfb, 0xf7, 0x76, 0xa8, 0xfd, 0x7e,
	0x37, 0xac, 0xbd, 0xbb, 0x1b, 0xd6, 0xfe, 0xb9, 0x1b, 0xd6, 0x50, 0x9f, 0xf1, 0xca, 0x8f, 0x64,
	0xae, 0xfd, 0x3c, 0x0b, 0x59, 0xb6, 0x58, 0x7a, 0x96, 0xcf, 0x63, 0x7b, 0x03, 0xf9, 0x8a, 0xf1,
	0xad, 0xc8, 0xbe, 0x2a, 0x6f, 0xb7, 0x6c, 0x9d, 0x52, 0xe9, 0x1d, 0x00, 0x99, 0x97, 0xff, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x39, 0x1d, 0x11, 0x41, 0xff, 0x06, 0x00, 0x00,
}

func (this *RewardProgram) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardProgram)
	if !ok {
		that2, ok := that.(RewardProgram)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.DistributeFromAddress != that1.DistributeFromAddress {
		return false
	}
	if !this.Coin.Equal(&that1.Coin) {
		return false
	}
	if this.EpochId != that1.EpochId {
		return false
	}
	if this.StartEpoch != that1.StartEpoch {
		return false
	}
	if this.NumberEpochs != that1.NumberEpochs {
		return false
	}
	if !this.EligibilityCriteria.Equal(that1.EligibilityCriteria) {
		return false
	}
	return true
}
func (this *EpochRewardDistribution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EpochRewardDistribution)
	if !ok {
		that2, ok := that.(EpochRewardDistribution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EpochId != that1.EpochId {
		return false
	}
	if this.RewardProgramId != that1.RewardProgramId {
		return false
	}
	if !this.TotalRewardsPool.Equal(&that1.TotalRewardsPool) {
		return false
	}
	if this.TotalShares != that1.TotalShares {
		return false
	}
	if this.EpochEnded != that1.EpochEnded {
		return false
	}
	return true
}
func (this *RewardClaim) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardClaim)
	if !ok {
		that2, ok := that.(RewardClaim)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if len(this.SharesPerEpochPerReward) != len(that1.SharesPerEpochPerReward) {
		return false
	}
	for i := range this.SharesPerEpochPerReward {
		if !this.SharesPerEpochPerReward[i].Equal(that1.SharesPerEpochPerReward[i]) {
			return false
		}
	}
	return true
}
func (this *SharesPerEpochPerRewardsProgram) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SharesPerEpochPerRewardsProgram)
	if !ok {
		that2, ok := that.(SharesPerEpochPerRewardsProgram)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RewardProgramId != that1.RewardProgramId {
		return false
	}
	if this.Shares != that1.Shares {
		return false
	}
	if this.EpochId != that1.EpochId {
		return false
	}
	if this.EpochEndHeight != that1.EpochEndHeight {
		return false
	}
	if this.Claimed != that1.Claimed {
		return false
	}
	if this.ExpirationHeight != that1.ExpirationHeight {
		return false
	}
	if this.Expired != that1.Expired {
		return false
	}
	if this.TotalShares != that1.TotalShares {
		return false
	}
	if !this.TotalRewards.Equal(&that1.TotalRewards) {
		return false
	}
	return true
}
func (this *ActionDelegate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionDelegate)
	if !ok {
		that2, ok := that.(ActionDelegate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Minimum != that1.Minimum {
		return false
	}
	if this.Maximum != that1.Maximum {
		return false
	}
	return true
}
func (this *ActionTransferDelegations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionTransferDelegations)
	if !ok {
		that2, ok := that.(ActionTransferDelegations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Minimum != that1.Minimum {
		return false
	}
	if this.Maximum != that1.Maximum {
		return false
	}
	return true
}
func (this *EligibilityCriteria) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EligibilityCriteria)
	if !ok {
		that2, ok := that.(EligibilityCriteria)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	return true
}
func (m *RewardProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EligibilityCriteria != nil {
		{
			size, err := m.EligibilityCriteria.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.NumberEpochs != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.NumberEpochs))
		i--
		dAtA[i] = 0x30
	}
	if m.StartEpoch != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.StartEpoch))
		i--
		dAtA[i] = 0x28
	}
	if len(m.EpochId) > 0 {
		i -= len(m.EpochId)
		copy(dAtA[i:], m.EpochId)
		i = encodeVarintReward(dAtA, i, uint64(len(m.EpochId)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DistributeFromAddress) > 0 {
		i -= len(m.DistributeFromAddress)
		copy(dAtA[i:], m.DistributeFromAddress)
		i = encodeVarintReward(dAtA, i, uint64(len(m.DistributeFromAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochRewardDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochRewardDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochRewardDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochEnded {
		i--
		if m.EpochEnded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.TotalShares != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.TotalShares))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.TotalRewardsPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.RewardProgramId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.RewardProgramId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EpochId) > 0 {
		i -= len(m.EpochId)
		copy(dAtA[i:], m.EpochId)
		i = encodeVarintReward(dAtA, i, uint64(len(m.EpochId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SharesPerEpochPerReward) > 0 {
		for iNdEx := len(m.SharesPerEpochPerReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SharesPerEpochPerReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReward(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SharesPerEpochPerRewardsProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SharesPerEpochPerRewardsProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SharesPerEpochPerRewardsProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalRewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.TotalShares != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.TotalShares))
		i--
		dAtA[i] = 0x40
	}
	if m.Expired {
		i--
		if m.Expired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ExpirationHeight != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ExpirationHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.Claimed {
		i--
		if m.Claimed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.EpochEndHeight != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.EpochEndHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EpochId) > 0 {
		i -= len(m.EpochId)
		copy(dAtA[i:], m.EpochId)
		i = encodeVarintReward(dAtA, i, uint64(len(m.EpochId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Shares != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.Shares))
		i--
		dAtA[i] = 0x10
	}
	if m.RewardProgramId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.RewardProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionDelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionDelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionDelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Maximum != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.Maximum))
		i--
		dAtA[i] = 0x10
	}
	if m.Minimum != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.Minimum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionTransferDelegations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionTransferDelegations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionTransferDelegations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Maximum != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.Maximum))
		i--
		dAtA[i] = 0x10
	}
	if m.Minimum != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.Minimum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EligibilityCriteria) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EligibilityCriteria) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EligibilityCriteria) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReward(dAtA []byte, offset int, v uint64) int {
	offset -= sovReward(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReward(uint64(m.Id))
	}
	l = len(m.DistributeFromAddress)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovReward(uint64(l))
	l = len(m.EpochId)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if m.StartEpoch != 0 {
		n += 1 + sovReward(uint64(m.StartEpoch))
	}
	if m.NumberEpochs != 0 {
		n += 1 + sovReward(uint64(m.NumberEpochs))
	}
	if m.EligibilityCriteria != nil {
		l = m.EligibilityCriteria.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}

func (m *EpochRewardDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EpochId)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if m.RewardProgramId != 0 {
		n += 1 + sovReward(uint64(m.RewardProgramId))
	}
	l = m.TotalRewardsPool.Size()
	n += 1 + l + sovReward(uint64(l))
	if m.TotalShares != 0 {
		n += 1 + sovReward(uint64(m.TotalShares))
	}
	if m.EpochEnded {
		n += 2
	}
	return n
}

func (m *RewardClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if len(m.SharesPerEpochPerReward) > 0 {
		for _, e := range m.SharesPerEpochPerReward {
			l = e.Size()
			n += 1 + l + sovReward(uint64(l))
		}
	}
	return n
}

func (m *SharesPerEpochPerRewardsProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardProgramId != 0 {
		n += 1 + sovReward(uint64(m.RewardProgramId))
	}
	if m.Shares != 0 {
		n += 1 + sovReward(uint64(m.Shares))
	}
	l = len(m.EpochId)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if m.EpochEndHeight != 0 {
		n += 1 + sovReward(uint64(m.EpochEndHeight))
	}
	if m.Claimed {
		n += 2
	}
	if m.ExpirationHeight != 0 {
		n += 1 + sovReward(uint64(m.ExpirationHeight))
	}
	if m.Expired {
		n += 2
	}
	if m.TotalShares != 0 {
		n += 1 + sovReward(uint64(m.TotalShares))
	}
	l = m.TotalRewards.Size()
	n += 1 + l + sovReward(uint64(l))
	return n
}

func (m *ActionDelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Minimum != 0 {
		n += 1 + sovReward(uint64(m.Minimum))
	}
	if m.Maximum != 0 {
		n += 1 + sovReward(uint64(m.Maximum))
	}
	return n
}

func (m *ActionTransferDelegations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Minimum != 0 {
		n += 1 + sovReward(uint64(m.Minimum))
	}
	if m.Maximum != 0 {
		n += 1 + sovReward(uint64(m.Maximum))
	}
	return n
}

func (m *EligibilityCriteria) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}

func sovReward(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReward(x uint64) (n int) {
	return sovReward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeFromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributeFromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartEpoch", wireType)
			}
			m.StartEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberEpochs", wireType)
			}
			m.NumberEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberEpochs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EligibilityCriteria", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EligibilityCriteria == nil {
				m.EligibilityCriteria = &EligibilityCriteria{}
			}
			if err := m.EligibilityCriteria.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochRewardDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochRewardDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochRewardDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgramId", wireType)
			}
			m.RewardProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardsPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardsPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			m.TotalShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochEnded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EpochEnded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesPerEpochPerReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharesPerEpochPerReward = append(m.SharesPerEpochPerReward, &SharesPerEpochPerRewardsProgram{})
			if err := m.SharesPerEpochPerReward[len(m.SharesPerEpochPerReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SharesPerEpochPerRewardsProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SharesPerEpochPerRewardsProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SharesPerEpochPerRewardsProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgramId", wireType)
			}
			m.RewardProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			m.Shares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochEndHeight", wireType)
			}
			m.EpochEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochEndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Claimed = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationHeight", wireType)
			}
			m.ExpirationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expired = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			m.TotalShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionDelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionDelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionDelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minimum", wireType)
			}
			m.Minimum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minimum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum", wireType)
			}
			m.Maximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maximum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionTransferDelegations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionTransferDelegations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionTransferDelegations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minimum", wireType)
			}
			m.Minimum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minimum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum", wireType)
			}
			m.Maximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maximum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EligibilityCriteria) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EligibilityCriteria: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EligibilityCriteria: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &types1.Any{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReward
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReward
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReward
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReward        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReward          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReward = fmt.Errorf("proto: unexpected end of group")
)
