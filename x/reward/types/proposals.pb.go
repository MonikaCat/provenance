// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/reward/v1/proposals.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/provenance-io/provenance/x/epoch/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AddRewardProgramProposal defines a governance proposal to add a rewards program
type AddRewardProgramProposal struct {
	Title         string         `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	RewardProgram *RewardProgram `protobuf:"bytes,3,opt,name=reward_program,json=rewardProgram,proto3" json:"reward_program,omitempty"`
}

func (m *AddRewardProgramProposal) Reset()      { *m = AddRewardProgramProposal{} }
func (*AddRewardProgramProposal) ProtoMessage() {}
func (*AddRewardProgramProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_081a3605de2e1dba, []int{0}
}
func (m *AddRewardProgramProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRewardProgramProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRewardProgramProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRewardProgramProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRewardProgramProposal.Merge(m, src)
}
func (m *AddRewardProgramProposal) XXX_Size() int {
	return m.Size()
}
func (m *AddRewardProgramProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRewardProgramProposal.DiscardUnknown(m)
}

var xxx_messageInfo_AddRewardProgramProposal proto.InternalMessageInfo

func (m *AddRewardProgramProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AddRewardProgramProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AddRewardProgramProposal) GetRewardProgram() *RewardProgram {
	if m != nil {
		return m.RewardProgram
	}
	return nil
}

func init() {
	proto.RegisterType((*AddRewardProgramProposal)(nil), "provenance.reward.v1.AddRewardProgramProposal")
}

func init() {
	proto.RegisterFile("provenance/reward/v1/proposals.proto", fileDescriptor_081a3605de2e1dba)
}

var fileDescriptor_081a3605de2e1dba = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xe3, 0xef, 0x13, 0x08, 0x52, 0xc1, 0x10, 0x55, 0x22, 0xea, 0xe0, 0x96, 0x3f, 0x43,
	0x17, 0x62, 0xa5, 0x6c, 0x6c, 0x30, 0x32, 0x55, 0x1d, 0x59, 0x90, 0xe3, 0x5c, 0x5c, 0x4b, 0x4d,
	0xae, 0x65, 0xbb, 0x01, 0xde, 0x82, 0x91, 0xb1, 0x23, 0x8f, 0xc2, 0xd8, 0x91, 0x11, 0xb5, 0x0b,
	0x8f, 0x81, 0xea, 0xb4, 0x6a, 0x40, 0xdd, 0x7c, 0x7c, 0x7f, 0x3a, 0xf7, 0x9e, 0x13, 0x5e, 0x68,
	0x83, 0x15, 0x94, 0xbc, 0x14, 0xc0, 0x0c, 0x3c, 0x71, 0x93, 0xb3, 0x2a, 0x65, 0xda, 0xa0, 0x46,
	0xcb, 0x27, 0x36, 0xd1, 0x06, 0x1d, 0x46, 0xed, 0x2d, 0x95, 0xd4, 0x54, 0x52, 0xa5, 0x9d, 0xb6,
	0x44, 0x89, 0x1e, 0x60, 0xab, 0x57, 0xcd, 0x76, 0xa8, 0x44, 0x94, 0x13, 0x60, 0x5e, 0x65, 0xd3,
	0x47, 0x96, 0x4f, 0x0d, 0x77, 0x0a, 0xcb, 0xf5, 0xbc, 0xfb, 0x77, 0xee, 0x54, 0x01, 0xd6, 0xf1,
	0x42, 0x6f, 0x0c, 0x04, 0xda, 0x02, 0x2d, 0xcb, 0xb8, 0x05, 0x56, 0xa5, 0x19, 0x38, 0x9e, 0x32,
	0x81, 0x6a, 0x63, 0x70, 0xda, 0x38, 0x19, 0x34, 0x8a, 0xf1, 0xea, 0x62, 0x09, 0x25, 0x58, 0x65,
	0x77, 0x20, 0xdb, 0x54, 0xeb, 0xcb, 0x3d, 0x72, 0xf6, 0x4e, 0xc2, 0xf8, 0x26, 0xcf, 0x47, 0xfe,
	0x6f, 0x68, 0x50, 0x1a, 0x5e, 0x0c, 0xd7, 0xb1, 0xa3, 0x76, 0xb8, 0xe7, 0x94, 0x9b, 0x40, 0x4c,
	0x7a, 0xa4, 0x7f, 0x38, 0xaa, 0x45, 0xd4, 0x0b, 0x5b, 0x39, 0x58, 0x61, 0x94, 0x5e, 0xc5, 0x89,
	0xff, 0xf9, 0x59, 0xf3, 0x2b, 0xba, 0x0b, 0x8f, 0xeb, 0x25, 0x0f, 0xba, 0x76, 0x8c, 0xff, 0xf7,
	0x48, 0xbf, 0x35, 0x38, 0x4f, 0x76, 0x15, 0x98, 0xfc, 0x5a, 0x3e, 0x3a, 0x32, 0x4d, 0x79, 0x7d,
	0xf0, 0x36, 0xeb, 0x06, 0xdf, 0xb3, 0x2e, 0xb9, 0x95, 0x1f, 0x0b, 0x4a, 0xe6, 0x0b, 0x4a, 0xbe,
	0x16, 0x94, 0xbc, 0x2e, 0x69, 0x30, 0x5f, 0xd2, 0xe0, 0x73, 0x49, 0x83, 0xf0, 0x44, 0xe1, 0x4e,
	0xe7, 0x21, 0xb9, 0x1f, 0x48, 0xe5, 0xc6, 0xd3, 0x2c, 0x11, 0x58, 0xb0, 0x2d, 0x72, 0xa9, 0xb0,
	0xa1, 0xd8, 0xf3, 0xa6, 0x1d, 0xf7, 0xa2, 0xc1, 0x66, 0xfb, 0xbe, 0x9a, 0xab, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x5a, 0xdf, 0xec, 0x74, 0x15, 0x02, 0x00, 0x00,
}

func (this *AddRewardProgramProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddRewardProgramProposal)
	if !ok {
		that2, ok := that.(AddRewardProgramProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.RewardProgram.Equal(that1.RewardProgram) {
		return false
	}
	return true
}
func (m *AddRewardProgramProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRewardProgramProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRewardProgramProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardProgram != nil {
		{
			size, err := m.RewardProgram.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposals(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposals(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposals(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddRewardProgramProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	if m.RewardProgram != nil {
		l = m.RewardProgram.Size()
		n += 1 + l + sovProposals(uint64(l))
	}
	return n
}

func sovProposals(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposals(x uint64) (n int) {
	return sovProposals(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddRewardProgramProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRewardProgramProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRewardProgramProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgram", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardProgram == nil {
				m.RewardProgram = &RewardProgram{}
			}
			if err := m.RewardProgram.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposals(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposals
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposals
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposals
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposals        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposals          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposals = fmt.Errorf("proto: unexpected end of group")
)
